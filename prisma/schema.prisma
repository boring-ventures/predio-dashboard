generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  user_id           String    @id @db.Uuid
  firstName         String?   @map("first_name")
  lastName          String?   @map("last_name")
  profile_image_url String?
  client_type       String?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)

  @@map("profiles")
}

model credit_scores {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id          String?   @db.Uuid
  monthly_income   Decimal?  @db.Decimal
  estimated_credit Decimal?  @db.Decimal
  calculated_at    DateTime? @default(now()) @db.Timestamptz(6)
  users            users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model messages {
  id                                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sender_id                         String?   @db.Uuid
  receiver_id                       String?   @db.Uuid
  content                           String
  sent_at                           DateTime? @default(now()) @db.Timestamptz(6)
  users_messages_receiver_idTousers users?    @relation("messages_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_messages_sender_idTousers   users?    @relation("messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model preferences {
  user_id                String   @id @db.Uuid
  notify_messages        Boolean? @default(true)
  notify_visits          Boolean? @default(true)
  notify_recommendations Boolean? @default(true)
  notify_promotions      Boolean? @default(true)
  users                  users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model properties {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  owner_id          String?             @db.Uuid
  type              String?
  surface           Decimal?            @db.Decimal
  bedrooms          Int?
  bathrooms         Int?
  price             Decimal?            @db.Decimal
  description       String?
  location          String?
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  users             users?              @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
  property_features property_features[]
  visits            visits[]
}

model property_features {
  property_id String     @db.Uuid
  amenity     String
  properties  properties @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([property_id, amenity])
}

model users {
  id                                   String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                                String          @unique
  created_at                           DateTime?       @default(now()) @db.Timestamptz(6)
  credit_scores                        credit_scores[]
  messages_messages_receiver_idTousers messages[]      @relation("messages_receiver_idTousers")
  messages_messages_sender_idTousers   messages[]      @relation("messages_sender_idTousers")
  preferences                          preferences?
  properties                           properties[]
  visits                               visits[]
}

model visits {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  property_id   String?     @db.Uuid
  user_id       String?     @db.Uuid
  scheduled_for DateTime?   @db.Timestamp(6)
  created_at    DateTime?   @default(now()) @db.Timestamptz(6)
  properties    properties? @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?      @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}
